#[import(cc = "plugin", name = "wrap_token")] fn wrap_token(_token: fn() -> i32, _expr: fn (i32) -> i32) -> ();
#[import(cc = "plugin", name = "generate_token", depends = wrap_token)] fn generate_token(_expr: fn () -> i32) -> fn () -> i32;

#[import(cc = "plugin", name = "with_shared")] fn with_shared(i64, fn(i64) -> ()) -> fn() -> ();

fn shared[T](body: fn(i64) -> ()) {
    with_shared(sizeof[T](), body)
}


#[export]
fn main (_argc : i32, _argv : &[&[u8]]) -> i32 {
    for offset in shared[i32]() {
        print_i64(offset);
        print_string("\n");

        for offset in shared[i64]() {
            print_i64(offset);
            print_string("\n");
        }
    }

    0
}
