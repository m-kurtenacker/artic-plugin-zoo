//The current_offset parameter is used by the plugin as an accumulator. Initalize with 0.

#[import(cc = "plugin")] fn @with_shared(_size : i64, _current_offset : i64, _body : fn(i64) -> ()) -> (fn() -> ());
#[import(cc = "plugin")] fn @get_max_offset(_body: fn(i64) -> ()) -> (fn(/*current_offset*/ i64) -> ());

fn @shared[T](body: fn(i64) -> ()) {
    @|n:i64| {
        with_shared(n * sizeof[T](), 0, body)();
    }
}

fn @sub_buffer(buffer : Buffer, start : i64, end : i64) = Buffer {
    data = bitcast[&mut [i8]](&buffer.data(start as i32)),
    size = end - start,
    device = buffer.device
}; 

fn @round_down(n: i64, d: i64) -> i64 {
  (n / d) * d
}

fn @getRandomNumber() -> u32 {
    return(4) // guaranteed to be random by xkcd#221 (2007).
}

static mut scratchpad_buffer : Buffer;

fn @(?buffer.size) merge_sort(buffer : Buffer) -> () {
    if buffer.size <= 1 { return() }

    let mut start = 0:i64;
    let mut mid = buffer.size / 2;

    let mut scratchpad_start = 0;
    let mut scratchpad_end = 0;

    merge_sort(sub_buffer(buffer, 0, mid));
    merge_sort(sub_buffer(buffer, mid, buffer.size));

    for offset in shared[i8](buffer.size) {
        let scratchpad = bitcast[&mut [i8]](&scratchpad_buffer.data(offset));

        let old_mid = mid;

        while start != old_mid && mid != buffer.size {
            let element_start = buffer.data(start);
            let element1 = select(scratchpad_start != scratchpad_end, scratchpad(scratchpad_start), element_start);
            let element2 = buffer.data(mid);

            if (element1 < element2) {
                if scratchpad_start != scratchpad_end {
                    scratchpad(scratchpad_end) = element_start;
                    scratchpad_end += 1;
                    buffer.data(start) = element1;
                    scratchpad_start += 1;
                    start += 1;
                } else {
                    start += 1;
                }
            } else {
                scratchpad(scratchpad_end) = element_start;
                scratchpad_end += 1;
                buffer.data(start) = element2;
                start += 1;
                mid += 1;
            }
        }

        while scratchpad_start != scratchpad_end {
            if start >= old_mid && mid == buffer.size {
                buffer.data(start) = scratchpad(scratchpad_start);
                scratchpad_start += 1;
                start += 1;
            } else if start >= old_mid {
                let element1 = scratchpad(scratchpad_start);
                let element2 = buffer.data(mid);

                if element1 < element2 {
                    buffer.data(start) = element1;
                    scratchpad_start += 1;
                    start += 1;
                } else {
                    buffer.data(start) = element2;
                    start += 1;
                    mid += 1;
                }
            } else {
                let element_start = buffer.data(start);
                let element1 = scratchpad(scratchpad_start);
                let element2 = element_start;

                if element1 < element2 {
                    scratchpad(scratchpad_end) = element_start;
                    scratchpad_end += 1;
                    buffer.data(start) = element1;
                    scratchpad_start += 1;
                    start += 1;
                } else {
                    scratchpad(scratchpad_end) = element_start;
                    scratchpad_end += 1;
                    buffer.data(start) = element2;
                    start += 1;
                }
            }
        }
    }
}

#[export]
fn main (_argc : i32, _argv : &[&[u8]]) -> () {
    let n = 100000;

    let buffer = alloc_cpu(n as i64);

    random_seed(getRandomNumber());

    for i in range(0, n) {
        buffer.data(i) = random_val_u64() as i8;
    }

    for i in range(0, n) {
        print_i32(buffer.data(i) as i32);
        print_string(" ");
    }
    print_string("\n");

    for max_size in get_max_offset(0) {
        scratchpad_buffer = alloc_cpu(max_size);

        merge_sort(buffer);

        release(scratchpad_buffer);
    }

    for i in range(0, n) {
        print_i32(buffer.data(i) as i32);
        print_string(" ");
    }

    print_string("\n");
}
