//The current_offset parameter is used by the plugin as an accumulator. Initalize with 0.

fn @get_max_offset(body: fn(i64) -> ()) = @|_unused: i64| { @body (52); }; //XXX: Magic number here.

fn @shared[T](body: fn(i64, i64) -> ()) {
    @|n:i64, shift : i64| {
        @body(shift , shift + n * sizeof[T]());
    }
}

fn @print_i64_cuda(n : i64, i : i64) {
    let mut tmp : [i64 * 3];
    tmp(0) = n;
    tmp(1) = cuda_threadIdx_x() as i64;
    tmp(2) = i;
    cuda_vprintf("offset %lld t %lld: %lld\n", &tmp as &[u8]);
}

#[export]
fn main (_argc : i32, _argv : &[&[u8]]) -> () {
    let n = 8;

    for r in get_max_offset(0) {
        print_string("Max offset: ");
        print_i32(r as i32);
        print_string("\n");

        cuda_with_lmem(0, (n, 1, 1), (n, 1, 1), r as i32, || {
            for offset, shift in shared[i32](n as i64, 0) {
                print_i64_cuda(0, offset);

                for offset, shift in shared[i32](2, shift) {
                    print_i64_cuda(1, offset);

                    if cuda_threadIdx_x() % 2 == 0 {
                        for offset, _shift in shared[i32](3, shift) {
                            print_i64_cuda(2, offset);
                        }
                    } else {
                        for offset, _shift in shared[i32](3, shift) {
                            print_i64_cuda(3, offset);
                        }
                    }

                    print_i64_cuda(4, offset);
                }

                for offset, _shift in shared[i32](4, shift) {
                    print_i64_cuda(5, offset);
                }

                print_i64_cuda(6, offset);
            }

            for offset, _shift in shared[i32](5, 0) {
                print_i64_cuda(7, offset);
            }
        });
    }
}
