fn @test(arg: &[u8], c : i32, buffer : &mut[u8]) {
    for i in unroll(0, c) {
        buffer(i) = arg(i);
    }

    buffer(c) = '\n';
    buffer(c + 1) = 0;

    print_string(buffer);
}

static mut buffer_a : [u8 * 4];
static mut buffer_b : [u8 * 5];
static mut buffer_c : [u8 * 6];

#[export]
fn main (argc : i32, argv : &[&[u8]]) -> () {
    test(argv(0), 2, &mut buffer_a);
    test(argv(0), 3, &mut buffer_b);
    test(argv(0), 4, &mut buffer_c);

    let buffer_d = alloc_cpu(sizeof[u8]() * (argc + 2) as i64);
    test(argv(0), argc, bitcast[&mut[u8]](buffer_d.data));
    release(buffer_d);
}
