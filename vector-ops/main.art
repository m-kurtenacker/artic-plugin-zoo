#[import(cc = "plugin", name = "vector_zeroinitializer")] fn vector_zeroinitializer () -> simd[i32 * 4];
#[import(cc = "plugin", name = "vector_neq", depends = vector_zeroinitializer)] fn vector_neq (_n : simd[i32 * 4], _m : simd[i32 * 4]) -> simd[bool * 4];

#[import(cc = "device", name = "llvm.masked.load.v4i32.p0")] fn llvm_masked_load(_ptr : &simd[i32 * 4], _align : i32, _mask : simd[bool * 4], _passthrough : simd[i32 * 4]) -> simd[i32 * 4];
#[import(cc = "device", name = "llvm.vector.reduce.add.v4i32")] fn llvm_reduce_add(_val : simd[i32 * 4]) -> i32;

#[export]
fn test(mask : &[i32], elements : &[i32]) -> i32 {
    let mask_int = (*(bitcast[&simd[i32 * 4]](mask))) : simd[i32 * 4];
    let zero_vec = vector_zeroinitializer() : simd[i32 * 4];

    let mask_bool = vector_neq(mask_int, zero_vec) : simd[bool * 4];

    let e_ptr = bitcast[&simd[i32 * 4]](elements);

    let load = llvm_masked_load(e_ptr, 4, mask_bool, zero_vec);

    let add = llvm_reduce_add(load);

    add
}

#[export]
fn main (_argc : i32, argv : &[&[u8]]) -> i32 {
    // main 0101 2476 => 4 + 6, all done simd.

    let m = argv(1);
    let n = argv(2);

    let m_buffer = alloc_cpu(sizeof[i32]() * 4 as i64);
    let m_data = bitcast[&mut [i32]](m_buffer.data);
    for i in range(0, 4) {
        m_data(i) = m(i) as i32 - 48;
    }

    let n_buffer = alloc_cpu(sizeof[i32]() * 4 as i64);
    let n_data = bitcast[&mut [i32]](n_buffer.data);
    for i in range(0, 4) {
        n_data(i) = n(i) as i32 - 48;
    }

    print_i32(test(m_data, n_data));
    print_string("\n");
    0
}
