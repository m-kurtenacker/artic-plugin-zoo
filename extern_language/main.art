#[import(cc = "plugin", name = "open_file")] fn @open_file(_filename: &[u8]) -> u64;
#[import(cc = "plugin", name = "emit_code")] fn @(?file) emit_code[T](file: u64, _code : T) -> u64;
#[import(cc = "plugin", name = "close_file")] fn @(?file) close_file(file: u64) -> ();

#[import(cc = "C", name = "test_2")] fn test_2 () -> i32;

fn @test(a : i32) -> i32 {
    if a == 0 {
        1
    } else {
        a * test(a - 1)
    }
}

#[export]
fn main (_argc : i32, _argv : &[&[u8]]) -> i32 {
    let f = open_file("test.c");

    let a = test(4);

    let g = emit_code [&[u8]] (f, "int test_2() { return ");
    let h = emit_code [i32] (g, a);
    let i = emit_code [&[u8]] (h, "; }");

    close_file(i);

    test_2()
}
